# DAO users who publish proposals and vote for them
type AuthorizedUser {
  # User's ethereum address
  address: String!

  # Date when the proposal was published
  createdAt: ISO8601DateTime!

  # Display name of the user which should be used to identify the user.
  #
  # This is just username if it is set; otherwise, this is just `user<id>`.
  displayName: String!

  # User's email
  email: String

  # User's ID
  id: ID!

  # User's username
  username: String
}

# Autogenerated input type of ChangeEmail
input ChangeEmailInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # New email for the user
  email: String!
}

# Autogenerated return type of ChangeEmail
type ChangeEmailPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # Mutation errors
  errors: [UserError!]!

  # User with the updated email
  user: AuthorizedUser
}

# Autogenerated input type of ChangeUsername
input ChangeUsernameInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # Username for the user.
  #  Requirements:
  # - 2 to 20 characters long
  # - Alphanumerical characters plus underscore
  # - Must not start with "user"
  username: String!
}

# Autogenerated return type of ChangeUsername
type ChangeUsernamePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # Mutation errors
  errors: [UserError!]!

  # User with the updated email
  user: AuthorizedUser
}

# Comments/messages between voters for proposals
type Comment {
  # Message/body of the comment.
  #  This is `null` if this message is deleted.
  body: String

  # Date when the comment was published
  createdAt: ISO8601DateTime!

  # Comment ID
  id: ID!

  # A flag to indicate if the current user liked this comment
  liked: Boolean!

  # Number of user who liked this comment
  likes: Int!

  # Parent id of the comment
  parentId: String!

  # Replies/comments about this comment
  replies(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): CommentConnection!

  # Stage/phase the comment was published
  stage: Stage!

  # Poster of this comment
  user: User!
}

# The connection type for Comment.
type CommentConnection {
  # A list of edges.
  edges: [CommentEdge]

  # A list of nodes.
  nodes: [Comment]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type CommentEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Comment
}

# An ISO 8601-encoded datetime
scalar ISO8601DateTime

type Mutation {
  # Change the current user's email
  changeEmail(input: ChangeEmailInput!): ChangeEmailPayload

  # Set the current user's username.
  #
  # You can only change your username ONCE so make sure to commit to this.
  changeUsername(input: ChangeUsernameInput!): ChangeUsernamePayload
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

# DAO proposals/projects to be voted and funded for
type Proposal {
  # Root comment id of the proposal
  commentId: String!

  # Date when the proposal was published
  createdAt: ISO8601DateTime!

  # A flag to indicate if the current user liked this proposal
  liked: Boolean!

  # Number of user who liked this proposal
  likes: Int!

  # Eth contract address of the proposal
  proposalId: String!

  # Stage/phase the proposal is in
  stage: Stage!

  # Publisher of this proposal
  user: User!
}

type Query {
  # Get the current user's information
  currentUser: AuthorizedUser!

  # Proposals
  searchCommentThreads(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Search comment replies by its id.
    #
    # This is required or proposal id.
    commentId: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Search proposal threads by proposal id address.
    #
    # This is required or the comment id.
    # Also this takes precedence if both exists.
    proposalId: String

    # Sorting options for the threads
    sortBy: ThreadSortBy = LATEST

    # Filter comments by stage/phase.
    #
    # If not specified, it defaults to the current stage.
    stage: Stage
  ): CommentConnection!

  # Search for proposals/projects
  searchProposals(
    # Filter proposals if it is liked or not by the current user
    liked: Boolean

    # Filter proposals by a list of proposal id addresses
    proposalIds: [String!]

    # Sorting options for the proposals
    sortBy: SortBy = DESC

    # Filter proposals by its stage/phase
    stage: Stage
  ): [Proposal!]!
}

enum SortBy {
  # Sort in ascending creation time
  ASC

  # Sort in descending creation time
  DESC
}

# Phases or stages for a proposal or comment
enum Stage {
  # Closed, finished or rejected
  ARCHIVED

  # To be voted on
  DRAFT

  # To be endorsed by a moderator
  IDEA
}

enum ThreadSortBy {
  # Sort in descending creation time
  LATEST

  # Sort in ascending creation time
  OLDEST
}

# DAO users who publish proposals and vote for them
type User {
  # Date when the proposal was published
  createdAt: ISO8601DateTime!

  # Display name of the user which should be used to identify the user.
  #
  # This is just username if it is set; otherwise, this is just `user<id>`.
  displayName: String!

  # User ID
  id: ID!
}

# A user-readable error
type UserError {
  # Which input final value this error came from
  field: String

  # A description of the error
  message: String!
}