"""
Customer address for KYC submission
"""
type Address {
  """
  Descriptive combination of unit/block/house number and street name of the address
  """
  address: String!

  """
  Extra descriptions about the address such as landmarks or corners
  """
  addressDetails: String

  """
  City of the address
  """
  city: String!

  """
  Country of the address
  """
  country: CountryValue!

  """
  Postal code of the address
  """
  postalCode: String!

  """
  State division of the address
  """
  state: String!
}

"""
Application user status such as access.
"""
type AppUser {
  """
  A flag indicating if the application cannot be used by the user.
  """
  isUnavailable: Boolean!
}

"""
Autogenerated input type of ApproveKycMutation
"""
input ApproveKycMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Expiration date for this KYC.

  Validations:
  - Must be a future date.
  """
  expirationDate: Date!

  """
  The ID of the KYC
  """
  kycId: String!
}

"""
Autogenerated return type of ApproveKycMutation
"""
type ApproveKycMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors

  Operation Errors:
  - KYC is not pending
  - KYC not found
  """
  errors: [UserError!]!

  """
  Approved KYC
  """
  kyc: Kyc
}

"""
DAO users who publish proposals and vote for them
"""
type AuthorizedUser {
  """
  User's ethereum address
  """
  address: EthAddress!

  """
  A flag indicating the if the user can comment in projects
  """
  canComment: Boolean!

  """
  Date when the proposal was published
  """
  createdAt: ISO8601DateTime!

  """
  Display name of the user which should be used to identify the user.
   This is just username if it is set; otherwise, this is just `user<id>`.
  """
  displayName: String!

  """
  User's email
  """
  email: String

  """
  User's ID
  """
  id: ID!

  """
  A flag indicating the user is a forum admin

  Privileges:
  - Can ban and unban users
  - Can ban and unban comments
  """
  isForumAdmin: Boolean!

  """
  A flag indicating the user is an KYC officer

  Privileges:
  - Can approve or reject KYCs
  """
  isKycOfficer: Boolean!

  """
  Current KYC submission of the user
  """
  kyc: Kyc

  """
  The user's accumulated points in the quarter.
  """
  quarterPoint: BigNumber!

  """
  The user's reputation in participating in the system.
  """
  reputationPoint: BigNumber!

  """
  User's username
  """
  username: String
}

"""
Autogenerated input type of BanCommentMutation
"""
input BanCommentMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Comment ID
  """
  commentId: String!
}

"""
Autogenerated return type of BanCommentMutation
"""
type BanCommentMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Banned comment
  """
  comment: Comment

  """
  Mutation errors

  Operation Errors:
  - Comment not found
  - Comment already banned
  - Comment cannot be banned
  """
  errors: [UserError!]!
}

"""
Autogenerated input type of BanUserMutation
"""
input BanUserMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the user to ban
  """
  id: String!
}

"""
Autogenerated return type of BanUserMutation
"""
type BanUserMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors

  Operation Errors:
  - User not found
  - User already banned
  - User cannot be banned
  """
  errors: [UserError!]!

  """
  Banned user
  """
  user: DaoUser
}

"""
A decimal value represented as a `String`
"""
scalar BigNumber

"""
Autogenerated input type of ChangeEmailMutation
"""
input ChangeEmailMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  New email for the user.

  Validations:
  - Maximum of 254 characters
  - Must be of this format: `<name_part>@<domain_part>`
  """
  email: String!
}

"""
Autogenerated return type of ChangeEmailMutation
"""
type ChangeEmailMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors
  """
  errors: [UserError!]!

  """
  User with the updated email
  """
  user: AuthorizedUser
}

"""
Autogenerated input type of ChangeUsernameMutation
"""
input ChangeUsernameMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Username for the user.

  Validations:
  - Minimum of 2 characters
  - Maximum of 150 characters
  - Alphanumerical characters plus underscore
  - Must not start with `user`
  """
  username: String!
}

"""
Autogenerated return type of ChangeUsernameMutation
"""
type ChangeUsernameMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors

  Operation Errors:
  - Username is already set
  """
  errors: [UserError!]!

  """
  User with the updated email
  """
  user: AuthorizedUser
}

"""
Comments/messages between voters for proposals
"""
type Comment {
  """
  Message/body of the comment.
   This is `null` if this message is deleted or banned.
  """
  body: String

  """
  Date when the comment was published
  """
  createdAt: ISO8601DateTime!

  """
  Comment ID
  """
  id: ID!

  """
  A flag indicating if the comment is banned.

  Can only be seen by a `Forum Admin`, otherwise `null`
  """
  isBanned: Boolean

  """
  A flag to indicate if the current user liked this comment. Also, `null` if no current user.
  """
  liked: Boolean

  """
  Number of user who liked this comment. Also, `null` if no current user.
  """
  likes: Int

  """
  Parent id of the comment
  """
  parentId: String!

  """
  Replies/comments about this comment.

   Given a parent comment, comment threads are list of parent comment replies
   and the reply of those replies and so on.

   Since this is designed with a load more functionality,
   this uses Relay connection pagination.
  """
  replies(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int = 10
  ): CommentThreadConnection!

  """
  Stage/phase the comment was published
  """
  stage: ProposalStageEnum!

  """
  Poster of this comment
  """
  user: User!
}

"""
An edge in a connection.
"""
type CommentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Comment
}

"""
Autogenerated return type of CommentPosted
"""
type CommentPostedPayload {
  comment: Comment!
}

"""
Connection pagination container for comment threads.
 Note: AVOID USING `pageInfo` since it isn't implemented as with `KycConnection`.
 Instead, use only `hasNextPage` from this object.
"""
type CommentThreadConnection {
  """
  A list of edges.
  """
  edges: [CommentEdge]

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  A list of nodes.
  """
  nodes: [Comment]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Autogenerated return type of CommentUpdated
"""
type CommentUpdatedPayload {
  comment: UpdatedComment!
}

"""
Country for KYC Registration
"""
type Country {
  """
  A flag if the country is blocked
  """
  blocked: Boolean!

  """
  Name of the country
  """
  name: String!

  """
  App value of the country
  """
  value: String!
}

"""
A country represented by a string that comes form `Country.value`
"""
scalar CountryValue

"""
Users managed by the forum admin
"""
type DaoUser {
  """
  User's ethereum address
  """
  address: EthAddress!

  """
  A flag indicating the if the user can comment in projects
  """
  canComment: Boolean!

  """
  Date when the proposal was published
  """
  createdAt: ISO8601DateTime!

  """
  Display name of the user which should be used to identify the user.
   This is just username if it is set; otherwise, this is just `user<id>`.
  """
  displayName: String!

  """
  User's email
  """
  email: String

  """
  User's ID
  """
  id: ID!

  """
  A flag indicating if the user is banned from the project forum
  """
  isBanned: Boolean!

  """
  A flag indicating the user is a forum admin

  Privileges:
  - Can ban and unban users
  - Can ban and unban comments
  """
  isForumAdmin: Boolean!

  """
  A flag indicating the user is an KYC officer

  Privileges:
  - Can approve or reject KYCs
  """
  isKycOfficer: Boolean!

  """
  Current KYC submission of the user
  """
  kyc: Kyc

  """
  The user's accumulated points in the quarter.
  """
  quarterPoint: BigNumber!

  """
  The user's reputation in participating in the system.
  """
  reputationPoint: BigNumber!

  """
  User's username
  """
  username: String
}

"""
The connection type for DaoUser.
"""
type DaoUserConnection {
  """
  A list of edges.
  """
  edges: [DaoUserEdge]

  """
  A list of nodes.
  """
  nodes: [DaoUser]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type DaoUserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DaoUser
}

"""
A base64-encoded data URL (`data:image/png;base64;...`)
represented as a object with data and file type but no filename
"""
scalar DataUrl

"""
A date represented as a YYYY-MM-DD or iso8601 date
"""
scalar Date

"""
Customer's employment status
"""
enum EmploymentStatusEnum {
  """
  Works for a company
  """
  EMPLOYED

  """
  Works as a freelancer
  """
  SELF_EMPLOYED

  """
  Doesn't work for money
  """
  UNEMPLOYED
}

"""
The user's eth address represented by a `String`
"""
scalar EthAddress

"""
Customer's gender be it male or female
"""
enum GenderEnum {
  """
  To be voted on
  """
  FEMALE

  """
  To be endorsed by a moderator
  """
  MALE
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Customer ID pose for KYC submission
"""
type IdentificationPose {
  """
  Image of the pose with the ID.
   It is possible for this to be `null` after submitting
  since file storage is asynchronous, so be careful with the mutation.
  Howver, it should be a valid object in practice.
  """
  image: Image

  """
  Verification code for the pose
  """
  verificationCode: String!
}

"""
Customer identification proof for KYC submission
"""
type IdentificationProof {
  """
  Expiration date of the ID
  """
  expirationDate: Date!

  """
  Image of the ID.
   It is possible for this to be `null` after submitting
  since file storage is asynchronous, so be careful with the mutation.
  Howver, it should be a valid object in practice.
  """
  image: Image

  """
  Designated code/number for the ID
  """
  number: String!

  """
  Type of ID used
  """
  type: IdentificationProofTypeEnum!
}

"""
Customer's ID proof type
"""
enum IdentificationProofTypeEnum {
  """
  National Identity Card (Drivers License not accepted)
  """
  IDENTITY_CARD

  """
  National ID Card(Singapore Residents only)
  """
  NATIONAL_ID

  """
  International passport
  """
  PASSPORT
}

"""
Image used for KYC such as jpegs or pngs
"""
type Image {
  """
  Content type of the image such as `application/png`
  """
  contentType: String!

  """
  Base64 encoded string for the data itself
  """
  dataUrl: String!

  """
  File size of the image in bytes
  """
  fileSize: Int!

  """
  File name of the image
  """
  filename: String!
}

"""
Employment income ranges for KYC
"""
type IncomeRange {
  """
  Descriptive value of the income range
  """
  range: String!

  """
  Value of the income range
  """
  value: String!
}

"""
Income ranges represented by a string that comes form `IncomeRange.value`
"""
scalar IncomeRangeValue

"""
Employment industry for KYC
"""
type Industry {
  """
  Name of the industry
  """
  name: String!

  """
  Value of the industry
  """
  value: String!
}

"""
Industry for KYC submission
"""
scalar IndustryValue

"""
A customer's KYC submission
"""
type Kyc {
  """
  Birth date of the customer
  """
  birthdate: Date!

  """
  Date when the KYC was submitted
  """
  createdAt: ISO8601DateTime!

  """
  Customer email
  """
  email: String!

  """
  Current employment industry of the customer
  """
  employmentIndustry: IndustryValue!

  """
  Current employment status of the customer
  """
  employmentStatus: EmploymentStatusEnum!

  """
  Customer ethereum address
  """
  ethAddress: EthAddress!

  """
  Expiration date of the KYC.
   After this date, the KYC is marked `EXPIRED`
  and the user should submit again.
  """
  expirationDate: Date

  """
  First name of the customer
  """
  firstName: String!

  """
  Gender of the customer
  """
  gender: GenderEnum!

  """
  KYC ID
  """
  id: ID!

  """
  Pose image where the customer is holding an ID
  """
  identificationPose: IdentificationPose!

  """
  ID image such as passport or national ID of the customer
  """
  identificationProof: IdentificationProof!

  """
  Income range per annum of the customer
  """
  incomeRange: IncomeRangeValue!

  """
  A list of IP addresses used by the customer.
   Currently, IP address is not tracked so this is an empty list.
  """
  ipAddresses: [String!]!

  """
  A flag if the kyc is `APPROVED`
  """
  isApproved: Boolean!

  """
  Last name of the customer
  """
  lastName: String!

  """
  Country of the customer's nationality
  """
  nationality: CountryValue!

  """
  Phone number of the customer including the country code
  """
  phoneNumber: String!

  """
  If the status is `REJECTED`, this is reason it was rejected.
  """
  rejectionReason: RejectionReasonValue

  """
  Residential proof such as utility bills of the customer
  """
  residenceProof: ResidenceProof!

  """
  Current status or state of the KYC.
   If the KYC is approved and it is after the expiration date,
   the status is expired.
  """
  status: KycStatusEnum!

  """
  Date when the KYC was last touched or modified
  """
  updatedAt: ISO8601DateTime!

  """
  Customer user ID
  """
  userId: String!
}

"""
An edge in a connection.
"""
type KycEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Kyc
}

"""
Page-based pagination container for KYCs.
 Note: AVOID USING `pageInfo` since it does nothing and not easily customized at the moment.
 Instead, use `hasNextPage` and `hasPreviousPage` from this object.
"""
type KycPaginatedConnection {
  """
  A list of edges.
  """
  edges: [KycEdge]

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When backwards forwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  A list of nodes.
  """
  nodes: [Kyc]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Total number of records for this collection
  """
  totalCount: Int!

  """
  Total number of pages for this collection relative to page size
  """
  totalPage: Int!
}

"""
Kyc stages or phases
"""
enum KycStatusEnum {
  """
  Kyc is approved
  """
  APPROVED

  """
  Kyc is approved by an officer and is being finalized in the blockchain
  """
  APPROVING

  """
  Kyc expired and user must resubmit
  """
  EXPIRED

  """
  Kyc still pending or waiting to be approved
  """
  PENDING

  """
  Kyc was rejected
  """
  REJECTED
}

"""
Autogenerated return type of KycUpdated
"""
type KycUpdatedPayload {
  kyc: UpdatedKyc!
}

"""
This is just `CountryValue` but must be from a legal country
 Blocked countries:
- Belarus
- Cuba
- Democratic Republic of the Congo
- Iran
- Iraq
- Ivory Coast
- Liberia
- Myanmar
- North Korea
- South Sudan
- United States
- Zimbabwe
"""
scalar LegalCountryValue

"""
Autogenerated input type of LikeCommentMutation
"""
input LikeCommentMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Comment ID
  """
  commentId: String!
}

"""
Autogenerated return type of LikeCommentMutation
"""
type LikeCommentMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Liked comment
  """
  comment: Comment

  """
  Mutation errors

  Operation Errors:
  - Comment not found
  - Comment already liked
  - Comment cannot be liked
  """
  errors: [UserError!]!
}

"""
Voting rounds for proposal voting
"""
type Milestone {
  """
  Description of the milestone
  """
  description: String!

  """
  Title of the milestone
  """
  title: String!
}

type Mutation {
  """
  As a KYC officer, approve a pending KYC.

  Role: KYC Officer
  """
  approveKyc(input: ApproveKycMutationInput!): ApproveKycMutationPayload

  """
  As a forum admin, ban a comment so that its contents are hidden from other users.

  Role: Forum Admin
  """
  banComment(input: BanCommentMutationInput!): BanCommentMutationPayload

  """
  As a forum admin, ban a user from commenting in the forum.

  Role: Forum Admin
  """
  banUser(input: BanUserMutationInput!): BanUserMutationPayload

  """
  Change the current user's email
  """
  changeEmail(input: ChangeEmailMutationInput!): ChangeEmailMutationPayload

  """
  Set the current user's username.

  Username can only be changed ONCE so caution with this operation.
  """
  changeUsername(input: ChangeUsernameMutationInput!): ChangeUsernameMutationPayload

  """
  Given a unliked comment, like the comment
  """
  likeComment(input: LikeCommentMutationInput!): LikeCommentMutationPayload

  """
  Post a new comment or reply to one
  """
  postComment(input: PostCommentMutationInput!): PostCommentMutationPayload

  """
  As a KYC officer, reject a pending KYC with a reason.

  Role: KYC Officer
  """
  rejectKyc(input: RejectKycMutationInput!): RejectKycMutationPayload

  """
  As the current user, submit a KYC to access more features of the app.

  To submit the KYC, the user must already have his email set.
  Once submitted, a KYC admin will check the facts and
   will either approve or reject it.
  If rejected with a reason or expired over time,
   the user is encouraged to submit another KYC through this operation.
  """
  submitKyc(input: SubmitKycMutationInput!): SubmitKycMutationPayload

  """
  As a forum admin, unban a banned comment which reveals the comment contents to other users.

  Role: Forum Admin
  """
  unbanComment(input: UnbanCommentMutationInput!): UnbanCommentMutationPayload

  """
  As a forum admin, unban a banned user which allows them to comment again in the forum.

  Role: Forum Admin
  """
  unbanUser(input: UnbanUserMutationInput!): UnbanUserMutationPayload

  """
  Given a user liked comment, unlike the comment
  """
  unlikeComment(input: UnlikeCommentMutationInput!): UnlikeCommentMutationPayload

  """
  Unpost/remove/delete a comment.

  Can only unpost a comment you posted.
  """
  unpostComment(input: UnpostCommentMutationInput!): UnpostCommentMutationPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
A positive integer taken from the `Integer` implementation
"""
scalar PositiveInteger

"""
Autogenerated input type of PostCommentMutation
"""
input PostCommentMutationInput {
  """
  Message body of the comment.

  Currently, accepts any text so passing in HTML is discouraged.
  """
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Comment ID
  """
  commentId: String

  """
  Eth contract address of the proposal
  """
  proposalId: String
}

"""
Autogenerated return type of PostCommentMutation
"""
type PostCommentMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Newly published comment
  """
  comment: Comment

  """
  Mutation errors

  Operation Errors:
  - Proposal not found
  - Comment not found
  - Comment cannot be posted
  """
  errors: [UserError!]!
}

"""
DAO proposals/projects to be voted and funded for
"""
type Proposal {
  """
  Root comment id of the proposal
  """
  commentId: String!

  """
  Date when the proposal was published
  """
  createdAt: ISO8601DateTime!

  """
  Current voting round for this proposal
  """
  currentVotingRound: VotingRound

  """
  Proposal's short description
  """
  description: String!

  """
  Proposal's longer description or details
  """
  details: String!

  """
  A flag to indicate if the current user liked this proposal. Null if no current user.
  """
  liked: Boolean

  """
  Number of user who liked this proposal.
  """
  likes: Int!

  """
  Milestones for this proposal
  """
  milestones: [Milestone!]!

  """
  Eth contract address of the proposal
  """
  proposalId: String!

  """
  Publisher of this proposal
  """
  proposer: User!

  """
  Stage/phase the proposal is in
  """
  stage: ProposalStageEnum!

  """
  Proposal's title
  """
  title: String!

  """
  Total funding for the proposal
  """
  totalFunding: String!

  """
  Current voting stage of this proposal
  """
  votingStage: VotingStageEnum
}

"""
Phases or stages for a proposal or comment
"""
enum ProposalStageEnum {
  """
  Closed, finished or rejected
  """
  ARCHIVED

  """
  To be voted on
  """
  DRAFT

  """
  To be endorsed by a moderator
  """
  IDEA
}

type Query {
  """
  Get the user's application status.
  """
  appUser: AppUser

  """
  Search comment threads by either proposal or comment.
   See `comment.replies` for what threads are.
  """
  commentThreads(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Search comment replies by its id.
     This is required or proposal id.
    """
    commentId: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int = 10

    """
    Search comment threads by proposal id address.
     This is required or comment id.

    Also this takes precedence if both exists.
    """
    proposalId: String

    """
    Sorting options for the threads
    """
    sortBy: ThreadSortByEnum = LATEST

    """
    Filter comments by stage/phase.
     If not specified, it defaults to the current stage.
    """
    stage: ProposalStageEnum
  ): CommentThreadConnection!

  """
  List of countries to determine nationality for KYC
  """
  countries(
    """
    Filter countries if they are blocked.

    By default, this returns the usable countries for the frontend.
    """
    blocked: Boolean = false
  ): [Country!]!

  """
  Get the current user's information
  """
  currentUser: AuthorizedUser

  """
  List of income ranges for KYC
  """
  incomeRanges: [IncomeRange!]!

  """
  List of industries for KYC
  """
  industries: [Industry!]!

  """
  Find a KYC by id.

  Role: KYC Officer
  """
  kyc(
    """
    Search KYC by their ID
    """
    id: String!
  ): Kyc

  """
  Search for proposals/projects
  """
  proposals(
    """
    Filter proposals if it is liked or not by the current user
    """
    liked: Boolean

    """
    Filter proposals by a list of proposal id addresses
    """
    proposalIds: [String!]

    """
    Sorting options for the proposals
    """
    sortBy: SortByEnum = DESC

    """
    Filter proposals by its stage/phase
    """
    stage: ProposalStageEnum
  ): [Proposal!]!

  """
  List of rejection reasons for KYC rejection
  """
  rejectionReasons: [RejectionReason!]!

  """
  Search for DAO users.

  For now, this uses the standard Relay connection pagination.
   This might change to default page pagination.

  Role: Forum Admin
  """
  searchDaoUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search by display name.

    If this starts with `user<uid>`, this will search by users with `uid`.
     Otherwise, it will search by username.

    Might be changed to a partial match or `LIKE` in the future.
    """
    term: String!
  ): DaoUserConnection!

  """
  Search for KYCs, pending or all.

  Role: KYC Officer
  """
  searchKycs(
    """
    Batch page number for the collection.

    If the page number exceeds the total count
    then it returns an empty data
    """
    page: PositiveInteger = 1

    """
    Number of records to fetch per page
    """
    pageSize: PositiveInteger = 30

    """
    Filter KYCs by their status
    """
    status: KycStatusEnum
  ): KycPaginatedConnection!

  """
  Search for the current user's transactions.
  """
  searchTransactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter transaction updates by `Proposal.proposalId`
    """
    proposalId: String

    """
    Filter transactions by their status.
    """
    status: TransactionStatusEnum
  ): TransactionConnection!

  """
  Find a specific user.

  Role: KYC Officer
  """
  user(
    """
    Search user by their ID
    """
    id: String!
  ): AuthorizedUser
}

"""
Autogenerated input type of RejectKycMutation
"""
input RejectKycMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The ID of the KYC
  """
  kycId: String!

  """
  Reason for rejecting the KYC
  """
  rejectionReason: RejectionReasonValue!
}

"""
Autogenerated return type of RejectKycMutation
"""
type RejectKycMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors

  Operation Errors:
  - KYC is not pending
  """
  errors: [UserError!]!

  """
  Rejected KYC
  """
  kyc: Kyc
}

"""
Reasons for rejecting a KYC
"""
type RejectionReason {
  """
  Descriptive name of the reason
  """
  name: String!

  """
  Value of the reason
  """
  value: String!
}

"""
A rejection rason represented by a string that comes form `RejectionReason.value`
"""
scalar RejectionReasonValue

"""
Customer residence proof for KYC submission
"""
type ResidenceProof {
  """
  Image of the residence proof.
   It is possible for this to be `null` after submitting
  since file storage is asynchronous, so be careful with the mutation.
  Howver, it should be a valid object in practice.
  """
  image: Image

  """
  Current residential address of the customer
  """
  residence: Address!

  """
  Kind of image presented as proof
  """
  type: ResidenceProofTypeEnum!
}

"""
Type of customer residence proof
"""
enum ResidenceProofTypeEnum {
  """
  Bank statement
  """
  BANK_STATEMENT

  """
  Utility bill such as electricity or water
  """
  UTILITY_BILL
}

enum SortByEnum {
  """
  Sort in ascending creation time
  """
  ASC

  """
  Sort in descending creation time
  """
  DESC
}

"""
Autogenerated input type of SubmitKycMutation
"""
input SubmitKycMutationInput {
  """
  Descriptive combination of unit/block/house number and street name of the customer.

  Validations:
  - Maximum of 1000 characters
  """
  address: String!

  """
  Extra descriptions about the address such as landmarks or corners.

  Validations:
  - Maximum of 1000 characters
  """
  addressDetails: String

  """
  Legal/non-blocked country of the customer's birth
  """
  birthCountry: LegalCountryValue!

  """
  Birth date of the customer.

  Validations:
  - Must be 18 years or older
  """
  birthdate: Date!

  """
  City address of the customer.

  Validations:
  - Maximum of 250 characters
  """
  city: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Country address of the customer
  """
  country: LegalCountryValue!

  """
  Current employment industry of the customer
  """
  employmentIndustry: IndustryValue!

  """
  Current employment status of the customer
  """
  employmentStatus: EmploymentStatusEnum!

  """
  First name of the customer.

  Validations:
  - Maximum of 150 characters
  """
  firstName: String!

  """
  Gender of the customer
  """
  gender: GenderEnum!

  """
  Image data URL to prove identification is valid

  Validations:
  - Maximum of 10 MB size
  - JPEG or PNG files only
  """
  identificationPoseDataUrl: DataUrl!

  """
  The verification code presented in the identification pose.

  It is comprised of `<block number>-<first two digits of the block hash>`-<last two of the hash>`

  Validations:
  - Block number be 20 blocks old
  """
  identificationPoseVerificationCode: String!

  """
  Image data URL to prove personal identification.

  Validations:
  - Maximum of 10 MB size
  - JPEG or PNG files only
  """
  identificationProofDataUrl: DataUrl!

  """
  Expiration date of the ID.

  Validations:
  - Must not be expired or a future date
  """
  identificationProofExpirationDate: Date!

  """
  Code/number of the ID.

  Validations:
  - Maximum of 50 characters
  """
  identificationProofNumber: String!

  """
  Type of ID used
  """
  identificationProofType: IdentificationProofTypeEnum!

  """
  Income range per annum of the customer
  """
  incomeRange: IncomeRangeValue!

  """
  Last name of the customer.

  Validations:
  - Maximum of 150 characters
  """
  lastName: String!

  """
  Country of the customer's nationality
  """
  nationality: LegalCountryValue!

  """
  Phone number of the customer including the country code.

  Validations:
  - Maximum of 20 characters
  - Can optionally start with `+`
  - Must be comprised of digits (`0-9`) or dashes (`-`)
  - Must not start or end with a dash
  """
  phoneNumber: String!

  """
  Postal code address of the customer.

  Validations:
  - Maximum of 12 characters
  - Must be comprised of alphanumeric characters (`A-Z0-9`), spaces and dashes (`-`)
  - Must not end or begin with a dash
  """
  postalCode: String!

  """
  Image data URL to prove personal residence

  Validations:
  - Maximum of 10 MB size
  - JPEG or PNG files only
  """
  residenceProofDataUrl: DataUrl!

  """
  Kind/type of proof presented for residence
  """
  residenceProofType: ResidenceProofTypeEnum!

  """
  State or division addressof the customer.

  Validations:
  - Maximum of 250 characters
  """
  state: String!
}

"""
Autogenerated return type of SubmitKycMutation
"""
type SubmitKycMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors

  Operation Errors:
  - Email not sent
  - Already have a pending or active KYC
  """
  errors: [UserError!]!

  """
  New kyc submission
  """
  kyc: Kyc
}

type Subscription {
  """
  A comment was posted on some project
  """
  commentPosted: CommentPostedPayload!

  """
  A comment was updated on some project
  """
  commentUpdated: CommentUpdatedPayload!

  """
  A KYC was updated.

  Only updates users of their respective KYC.
  """
  kycUpdated: KycUpdatedPayload!

  """
  A transaction was updated.

  Only updates users who triggered the transaction.
  """
  transactionUpdated(
    """
    Filter transaction updates by `Proposal.proposalId`
    """
    proposalId: String
  ): TransactionUpdatedPayload!
}

enum ThreadSortByEnum {
  """
  Sort in descending creation time
  """
  LATEST

  """
  Sort in ascending creation time
  """
  OLDEST
}

"""
Transactions that are being watched in the blockchain
"""
type Transaction {
  """
  Transaction block number in the block chain.

  Has value when status is `SEEN`.
  """
  blockNumber: Int

  """
  Date when the proposal was published
  """
  createdAt: ISO8601DateTime!

  """
  Transaction ID
  """
  id: ID!

  """
  Transaction application project.

  Has value when this is related to a proposal.
  """
  project: String

  """
  Transaction status in the blockchain
  """
  status: TransactionStatusEnum!

  """
  Transaction title
  """
  title: String!

  """
  Transaction application type.

  Has value when this is related to a proposal.
  """
  transactionType: String

  """
  Transaction hash address
  """
  txhash: String!

  """
  User who triggered this transaction.
  """
  user: User!
}

"""
The connection type for Transaction.
"""
type TransactionConnection {
  """
  A list of edges.
  """
  edges: [TransactionEdge]

  """
  A list of nodes.
  """
  nodes: [Transaction]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TransactionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Transaction
}

"""
Transaction status
"""
enum TransactionStatusEnum {
  """
  Transaction confirmed in the blockchain
  """
  CONFIRMED

  """
  Transaction failed in the blockchain
  """
  FAILED

  """
  Transaction status unknown or pending in the blockchain
  """
  PENDING

  """
  Transaction being monitored for result in the blockchain
  """
  SEEN
}

"""
Autogenerated return type of TransactionUpdated
"""
type TransactionUpdatedPayload {
  transaction: Transaction!
}

"""
Autogenerated input type of UnbanCommentMutation
"""
input UnbanCommentMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Comment ID
  """
  commentId: String!
}

"""
Autogenerated return type of UnbanCommentMutation
"""
type UnbanCommentMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Unbanned user
  """
  comment: Comment

  """
  Mutation errors

  Operation Errors:
  - Comment not found
  - Comment already unbanned
  """
  errors: [UserError!]!
}

"""
Autogenerated input type of UnbanUserMutation
"""
input UnbanUserMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the user to unban
  """
  id: String!
}

"""
Autogenerated return type of UnbanUserMutation
"""
type UnbanUserMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors

  Operation Errors:
  - User not found
  - User already unbanned
  """
  errors: [UserError!]!

  """
  Unbanned user
  """
  user: DaoUser
}

"""
Autogenerated input type of UnlikeCommentMutation
"""
input UnlikeCommentMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Comment ID
  """
  commentId: String!
}

"""
Autogenerated return type of UnlikeCommentMutation
"""
type UnlikeCommentMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Unliked comment
  """
  comment: Comment

  """
  Mutation errors

  Operation Errors:
  - Comment not found
  - Comment already unliked
  """
  errors: [UserError!]!
}

"""
Autogenerated input type of UnpostCommentMutation
"""
input UnpostCommentMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Comment ID
  """
  commentId: String!
}

"""
Autogenerated return type of UnpostCommentMutation
"""
type UnpostCommentMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Unposted comment
  """
  comment: Comment

  """
  Mutation errors

  Operation Errors:
  - Comment not found
  - Comment already unposted
  - Comment cannot be unposted
  """
  errors: [UserError!]!
}

"""
Update comment payload
"""
type UpdatedComment {
  """
  Message/body of the comment.
   This is `null` if this message is deleted or banned.
  """
  body: String

  """
  Comment ID
  """
  id: ID!

  """
  Number of user who liked this comment
  """
  likes: Int!

  """
  Parent id of the comment
  """
  parentId: String!
}

"""
Changes in KYC
"""
type UpdatedKyc {
  """
  KYC ID
  """
  id: ID!

  """
  Current status or state of the KYC.
   If the KYC is approved and it is after the expiration date,
   the status is expired.
  """
  status: KycStatusEnum!
}

"""
DAO users who publish proposals and vote for them
"""
type User {
  """
  User's ethereum address.

  This may be deprecated or a privacy leak so it should not be depended on.
  """
  address: EthAddress!

  """
  Display name of the user which should be used to identify the user.
   This is just username if it is set; otherwise, this is just `user<id>`.
  """
  displayName: String!

  """
  The user's accumulated points in the quarter.
  """
  quarterPoint: BigNumber!

  """
  The user's reputation in participating in the system.
  """
  reputationPoint: BigNumber!
}

"""
A user-readable error
"""
type UserError {
  """
  Which input final value this error came from
  """
  field: String

  """
  A description of the error
  """
  message: String!
}

"""
Voting rounds for proposal voting
"""
type VotingRound {
  """
  Commit stage deadline
  """
  commitDeadline: String

  """
  Stacked DGXs that were voted voted no
  """
  no: String!

  """
  Reveal stage deadline
  """
  revealDeadline: String

  """
  The total number of voters for this round
  """
  totalVoterCount: String!

  """
  The total number of stake for this round
  """
  totalVoterStake: String!

  """
  Draft voting stage deadline
  """
  votingDeadline: String

  """
  Stacked DGXs that were voted voted yes
  """
  yes: String!
}

"""
Phases for a voting round
"""
enum VotingStageEnum {
  """
  Voters commit to a vote
  """
  COMMIT

  """
  The proposal is being drafted or finalized
  """
  DRAFT

  """
  Voters reveal their vote
  """
  REVEAL
}